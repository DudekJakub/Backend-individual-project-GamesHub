SET GLOBAL EVENT_SCHEDULER=ON;



CREATE VIEW GAMES_AND_RATINGS AS
SELECT GM.ID, GM.NAME, GR.RATING
FROM GAMES GM, game_ratings GR
WHERE GM.ID = GR.game_id;

CREATE VIEW GAMES_AND_OPINIONS AS
SELECT GM.ID, GM.NAME, GO.OPINION
FROM GAMES GM, game_opinions GO
WHERE GM.ID = GO.GAME_ID;



DROP TRIGGER IF EXISTS GAME_TABLE_OPINIONS_QNT_INSERT_UPDATE;

DELIMITER $$
CREATE TRIGGER GAME_TABLE_OPINIONS_QNT_INSERT_UPDATE AFTER INSERT ON GAME_OPINIONS
    FOR EACH ROW
BEGIN
    UPDATE GAMES SET GAMES.OPINIONS_QUANTITY = GAMES.OPINIONS_QUANTITY + 1 WHERE ID = new.GAME_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS GAME_TABLE_OPINIONS_QNT_DELETE_UPDATE;

DELIMITER $$
CREATE TRIGGER GAME_TABLE_OPINIONS_QNT_DELETE_UPDATE AFTER DELETE ON GAME_OPINIONS
    FOR EACH ROW
BEGIN
    UPDATE GAMES SET GAMES.OPINIONS_QUANTITY = GAMES.OPINIONS_QUANTITY - 1 WHERE ID = old.GAME_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS GAME_TABLE_RATINGS_QNT_INSERT_UPDATE;

DELIMITER $$
CREATE TRIGGER GAME_TABLE_RATINGS_QNT_INSERT_UPDATE AFTER INSERT ON GAME_RATINGS
    FOR EACH ROW
BEGIN
    UPDATE GAMES SET GAMES.RATINGS_QUANTITY = GAMES.RATINGS_QUANTITY + 1 WHERE ID = new.GAME_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS GAME_TABLE_RATINGS_QNT_DELETE_UPDATE;

DELIMITER $$
CREATE TRIGGER GAME_TABLE_RATINGS_QNT_DELETE_UPDATE AFTER DELETE ON GAME_RATINGS
    FOR EACH ROW
BEGIN
    UPDATE GAMES SET GAMES.RATINGS_QUANTITY = GAMES.RATINGS_QUANTITY - 1 WHERE ID = old.GAME_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS GAME_TABLE_AVERAGE_RATING_INSERT_UPDATE;

DELIMITER $$
CREATE TRIGGER GAME_TABLE_AVERAGE_RATING_INSERT_UPDATE AFTER INSERT ON GAME_RATINGS
    FOR EACH ROW
BEGIN

    DECLARE RESULT DOUBLE;
    SELECT AVG(RATING) FROM GAMES_AND_RATINGS WHERE ID = new.GAME_ID INTO RESULT;

    UPDATE GAMES SET GAMES.AVERAGE_RATING = RESULT WHERE ID = new.GAME_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS GAME_TABLE_AVERAGE_RATING_DELETE_UPDATE;

DELIMITER $$
CREATE TRIGGER GAME_TABLE_AVERAGE_RATING_DELETE_UPDATE AFTER DELETE ON GAME_RATINGS
    FOR EACH ROW
BEGIN

    DECLARE RESULT DOUBLE;
    SELECT AVG(RATING) FROM GAMES_AND_RATINGS WHERE ID = old.GAME_ID INTO RESULT;

    UPDATE GAMES SET GAMES.AVERAGE_RATING = RESULT WHERE ID = old.GAME_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS USER_TABLE_OPINIONS_QNT_INSERT_UPDATE;

DELIMITER $$
CREATE TRIGGER USER_TABLE_OPINIONS_QNT_INSERT_UPDATE AFTER INSERT ON GAME_OPINIONS
    FOR EACH ROW
BEGIN
    UPDATE USERS SET USERS.OPINIONS_QNT = USERS.OPINIONS_QNT + 1 WHERE ID = new.USER_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS USER_TABLE_OPINIONS_QNT_DELETE_UPDATE;

DELIMITER $$
CREATE TRIGGER USER_TABLE_OPINIONS_QNT_DELETE_UPDATE AFTER DELETE ON GAME_OPINIONS
    FOR EACH ROW
BEGIN
    UPDATE USERS SET USERS.OPINIONS_QNT = USERS.OPINIONS_QNT - 1 WHERE ID = old.USER_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS USER_TABLE_RATINGS_QNT_INSERT_UPDATE;

DELIMITER $$
CREATE TRIGGER USER_TABLE_RATINGS_QNT_INSERT_UPDATE AFTER INSERT ON GAME_RATINGS
    FOR EACH ROW
BEGIN
    UPDATE USERS SET USERS.RATINGS_QNT = USERS.RATINGS_QNT + 1 WHERE ID = new.USER_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS USER_TABLE_RATINGS_QNT_DELETE_UPDATE;

DELIMITER $$
CREATE TRIGGER USER_TABLE_RATINGS_QNT_DELETE_UPDATE AFTER DELETE ON GAME_RATINGS
    FOR EACH ROW
BEGIN
    UPDATE USERS SET USERS.RATINGS_QNT = USERS.RATINGS_QNT - 1 WHERE ID = old.USER_ID;
end $$
DELIMITER ;



DROP FUNCTION IF EXISTS GamePopularityStatus;

DELIMITER $$
CREATE FUNCTION GamePopularityStatus(opinionsQntPerDay DECIMAL, ratingsQntPerDay DECIMAL) RETURNS VARCHAR(30) DETERMINISTIC
BEGIN
    DECLARE result VARCHAR(30) DEFAULT 'LOW';
    IF opinionsQntPerDay > 10 OR  ratingsQntPerDay > 10 THEN
        SET result = 'ON THE TOP';
    ELSEIF opinionsQntPerDay > 7 AND opinionsQntPerDay <= 10 OR ratingsQntPerDay > 7 AND ratingsQntPerDay <= 10 THEN
        SET result = 'VERY HIGH';
    ELSEIF opinionsQntPerDay > 4 AND opinionsQntPerDay <= 7 OR ratingsQntPerDay > 4 AND ratingsQntPerDay <= 7 THEN
        SET result = 'HIGH';
    ELSEIF opinionsQntPerDay > 2 AND opinionsQntPerDay <= 4 OR ratingsQntPerDay > 2 AND ratingsQntPerDay <= 4 THEN
        SET result = 'MEDIUM';
    END IF;
    RETURN result;
END $$

DELIMITER ;



DROP FUNCTION IF EXISTS GameOpinionsPerDay;

DELIMITER $$
CREATE FUNCTION GameOpinionsPerDay(gameId LONG) RETURNS DOUBLE DETERMINISTIC
BEGIN
    DECLARE result DOUBLE (5,2);
    DECLARE opinions_qnt, opinions_days INT;
    SELECT COUNT(*) FROM GAME_OPINIONS WHERE GAME_ID = gameId INTO opinions_qnt;
    SELECT DATEDIFF(CURRENT_DATE, MIN(GO.PUBLICATION_DATE)) + 1 FROM GAME_OPINIONS GO WHERE GAME_ID = gameId INTO opinions_days;

    SET result = opinions_qnt / opinions_days;

    IF (result IS NULL) THEN
        SET result = 0.0;
    END IF ;

    RETURN result;
end $$
DELIMITER ;



DROP FUNCTION IF EXISTS GameRatingsPerDay;

DELIMITER $$
CREATE FUNCTION GameRatingsPerDay(gameId LONG) RETURNS DOUBLE DETERMINISTIC
BEGIN
    DECLARE result DOUBLE (5,2);
    DECLARE ratings_qnt, ratings_days INT;
    SELECT COUNT(*) FROM GAME_RATINGS WHERE GAME_ID = gameId INTO ratings_qnt;
    SELECT DATEDIFF(CURRENT_DATE, MIN(GR.PUBLICATION_DATE)) + 1 FROM GAME_RATINGS GR WHERE GAME_ID = gameId INTO ratings_days;

    SET result = ratings_qnt / ratings_days;

    IF (result IS NULL) THEN
        SET result = 0.0;
    END IF ;

    RETURN result;
end $$
DELIMITER ;




DROP PROCEDURE IF EXISTS UpdateGamePopularityStatus;

DELIMITER $$
CREATE PROCEDURE UpdateGamePopularityStatus()
BEGIN
    DECLARE GM_ID INT;
    DECLARE OPINIONS_PER_DAY, RATINGS_PER_DAY DECIMAL(5,2);
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_GAMES CURSOR FOR SELECT ID FROM GAMES;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;

    OPEN ALL_GAMES;
    WHILE (FINISHED = 0) DO
            FETCH ALL_GAMES INTO GM_ID;
            IF (FINISHED = 0) THEN
                SET OPINIONS_PER_DAY = GameOpinionsPerDay(GM_ID);
                SET RATINGS_PER_DAY = GameRatingsPerDay(GM_ID);

                UPDATE GAMES SET POPULARITY_STATUS = GamePopularityStatus(OPINIONS_PER_DAY, RATINGS_PER_DAY)
                WHERE ID = GM_ID;
                COMMIT ;
            END IF ;
        END WHILE ;
    CLOSE ALL_GAMES;
END $$
DELIMITER ;



CREATE EVENT UPDATE_GAMES_POP_STATUSES
    ON SCHEDULE EVERY 30 MINUTE
    DO CALL UpdateGamePopularityStatus();



DROP PROCEDURE IF EXISTS UpdateGameOpinionsAndRatingsPerDay;

DELIMITER $$
CREATE PROCEDURE UpdateGameOpinionsAndRatingsPerDay()
BEGIN
    DECLARE GM_ID INT;
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_GAMES CURSOR FOR SELECT ID FROM GAMES;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;

    OPEN ALL_GAMES;
    WHILE (FINISHED = 0) DO
            FETCH ALL_GAMES INTO GM_ID;
            IF (FINISHED = 0) THEN
                UPDATE GAMES SET GAMES.OPINIONS_PER_DAY = GameOpinionsPerDay(GM_ID), GAMES.RATINGS_PER_DAY = GameRatingsPerDay(GM_ID) WHERE ID = GM_ID;
                COMMIT ;
            END IF ;
        END WHILE ;
    CLOSE ALL_GAMES;
END $$
DELIMITER ;



DROP EVENT IF EXISTS UPDATE_GAMES_OPINIONS_AND_RATING_PER_DAY;

CREATE EVENT UPDATE_GAMES_OPINIONS_AND_RATING_PER_DAY
    ON SCHEDULE EVERY 25 MINUTE
    DO CALL UpdateGameOpinionsAndRatingsPerDay();



DROP TRIGGER IF EXISTS GAME_TABLE_RATINGS_PER_DAY_INSERT_UPDATE;

DELIMITER $$
CREATE TRIGGER GAME_TABLE_RATINGS_PER_DAY_INSERT_UPDATE AFTER INSERT ON GAME_RATINGS
    FOR EACH ROW
BEGIN
    UPDATE GAMES SET GAMES.RATINGS_PER_DAY = GameRatingsPerDay(new.GAME_ID) WHERE ID = new.GAME_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS GAME_TABLE_RATINGS_PER_DAY_DELETE_UPDATE;

DELIMITER $$
CREATE TRIGGER GAME_TABLE_RATINGS_PER_DAY_DELETE_UPDATE AFTER DELETE ON GAME_RATINGS
    FOR EACH ROW
BEGIN
    UPDATE GAMES SET GAMES.RATINGS_PER_DAY = GameRatingsPerDay(old.GAME_ID) WHERE ID = old.GAME_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS GAME_TABLE_OPINIONS_PER_DAY_INSERT_UPDATE;

DELIMITER $$
CREATE TRIGGER GAME_TABLE_OPINIONS_PER_DAY_INSERT_UPDATE AFTER INSERT ON GAME_OPINIONS
    FOR EACH ROW
BEGIN
    UPDATE GAMES SET GAMES.OPINIONS_PER_DAY = GameOpinionsPerDay(new.GAME_ID) WHERE ID = new.GAME_ID;
end $$
DELIMITER ;



DROP TRIGGER IF EXISTS GAME_TABLE_OPINION_PER_DAY_DELETE_UPDATE;

DELIMITER $$
CREATE TRIGGER GAME_TABLE_OPINION_PER_DAY_DELETE_UPDATE AFTER DELETE ON GAME_OPINIONS
    FOR EACH ROW
BEGIN
    UPDATE GAMES SET GAMES.OPINIONS_PER_DAY = GameOpinionsPerDay(old.GAME_ID) WHERE ID = old.GAME_ID;
end $$
DELIMITER ;



DROP FUNCTION IF EXISTS UserOpinionsPerDay;

DELIMITER $$
CREATE FUNCTION UserOpinionsPerDay(userId LONG) RETURNS DOUBLE DETERMINISTIC
BEGIN
    DECLARE result DOUBLE (5,2);
    DECLARE opinions_qnt, opinions_days INT;
    SELECT COUNT(*) FROM GAME_OPINIONS WHERE USER_ID = userId INTO opinions_qnt;
    SELECT DATEDIFF(MAX(GO.PUBLICATION_DATE), U.REGISTERED_DATE) + 1 FROM GAME_OPINIONS GO, USERS U WHERE GO.USER_ID AND U.ID = userId INTO opinions_days;

    SET result = opinions_qnt / opinions_days;

    IF (result IS NULL) THEN
        SET result = 0.0;
    END IF ;

    RETURN result;
end $$
DELIMITER ;



DROP FUNCTION IF EXISTS UserRatingsPerDay;

DELIMITER $$
CREATE FUNCTION UserRatingsPerDay(userId LONG) RETURNS DOUBLE DETERMINISTIC
BEGIN
    DECLARE result DOUBLE (5,2);
    DECLARE ratings_qnt, ratings_days INT;
    SELECT COUNT(*) FROM GAME_RATINGS WHERE USER_ID = userId INTO ratings_qnt;
    SELECT DATEDIFF(MAX(GR.PUBLICATION_DATE), U.REGISTERED_DATE) + 1 FROM GAME_RATINGS GR, USERS U WHERE GR.USER_ID AND U.ID = userId INTO ratings_days;

    SET result = ratings_qnt / ratings_days;

    IF (result IS NULL) THEN
        SET result = 0.0;
    END IF ;

    RETURN result;
end $$
DELIMITER ;


DROP PROCEDURE IF EXISTS UpdateUserOpinionsAndRatingsPerDay;

DELIMITER $$
CREATE PROCEDURE UpdateUserOpinionsAndRatingsPerDay()
BEGIN
    DECLARE U_ID INT;
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_USERS CURSOR FOR SELECT ID FROM USERS;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;

    OPEN ALL_USERS;
    WHILE (FINISHED = 0) DO
            FETCH ALL_USERS INTO U_ID;
            IF (FINISHED = 0) THEN
                UPDATE USERS SET USERS.OPINIONS_PER_DAY = UserOpinionsPerDay(U_ID), USERS.RATINGS_PER_DAY = UserRatingsPerDay(U_ID) WHERE ID = U_ID;
                COMMIT ;
            end if ;
        end while ;
    CLOSE ALL_USERS;
end $$
DELIMITER ;



DROP EVENT IF EXISTS UPDATE_USERS_OPINIONS_AND_RATINGS_PER_DAY;
CREATE EVENT UPDATE_USERS_OPINIONS_AND_RATINGS_PER_DAY
    ON SCHEDULE EVERY 27 MINUTE
    DO CALL UpdateUserOpinionsAndRatingsPerDay();



CREATE TABLE GAMES_STATISTICS (
                                  ID SERIAL PRIMARY KEY AUTO_INCREMENT,
                                  ADDED_DATE DATETIME DEFAULT NOW() NOT NULL ,
                                  QNT INT DEFAULT 0,
                                  OPINIONS_QNT INT DEFAULT 0,
                                  WITH_LOW_POP_STATUS INT DEFAULT 0,
                                  WITH_MEDIUM_POP_STATUS INT DEFAULT 0,
                                  WITH_HIGH_POP_STATUS INT DEFAULT 0,
                                  WITH_VERY_HIGH_POP_STATUS INT DEFAULT 0,
                                  WITH_ON_THE_TOP_POP_STATUS INT DEFAULT 0,
                                  WITH_AVG_RATING_LOWER_THEN_FIVE INT DEFAULT 0,
                                  WITH_AVG_RATING_BETWEEN_5_AND_7_5 INT DEFAULT 0,
                                  WITH_AVG_RATING_BETWEEN_7_5_AND_9 INT DEFAULT 0,
                                  WITH_AVG_RATING_HIGHER_EQUALS_9 INT DEFAULT 0
);


DROP PROCEDURE IF EXISTS CreateNewGamesStats;

DELIMITER $$
CREATE PROCEDURE CreateNewGamesStats()
BEGIN
    DECLARE QNT, OPINIONS_QNT, LOW_POP, MEDIUM_POP, HIGH_POP,
        VERY_HIGH_POP, ON_TOP_POP, AVG_RATING_LOWER_THEN_5, AVG_RATING_BETWEEN_5_AND_7_5,
        AVG_RATING_BETWEEN_7_5_AND_9, AVG_RATING_HIGHER_EQUALS_9 INT;

    SET QNT = (SELECT COUNT(*) FROM GAMES);
    SET OPINIONS_QNT = (SELECT COUNT(*) FROM GAME_OPINIONS GROUP BY GAME_ID);
    SET LOW_POP = (SELECT COUNT(*) FROM GAMES G WHERE G.POPULARITY_STATUS = 'LOW' GROUP BY G.POPULARITY_STATUS);
    SET MEDIUM_POP = (SELECT COUNT(*) FROM GAMES G WHERE G.POPULARITY_STATUS = 'MEDIUM' GROUP BY G.POPULARITY_STATUS);
    SET HIGH_POP = (SELECT COUNT(*) FROM GAMES G WHERE G.POPULARITY_STATUS = 'HIGH' GROUP BY G.POPULARITY_STATUS);
    SET VERY_HIGH_POP = (SELECT COUNT(*) FROM GAMES G WHERE G.POPULARITY_STATUS = 'VERY HIGH' GROUP BY G.POPULARITY_STATUS);
    SET ON_TOP_POP = (SELECT COUNT(*) FROM GAMES G WHERE G.POPULARITY_STATUS = 'ON THE TOP' GROUP BY G.POPULARITY_STATUS);
    SET AVG_RATING_LOWER_THEN_5 = (SELECT COUNT(*) FROM GAMES G WHERE G.AVERAGE_RATING < 5.0 GROUP BY G.AVERAGE_RATING);
    SET AVG_RATING_BETWEEN_5_AND_7_5 = (SELECT COUNT(*) FROM GAMES G WHERE G.AVERAGE_RATING > 5.0 AND G.AVERAGE_RATING <= 7.5 GROUP BY G.AVERAGE_RATING);
    SET AVG_RATING_BETWEEN_7_5_AND_9 = (SELECT COUNT(*) FROM GAMES G WHERE G.AVERAGE_RATING > 7.5 AND G.AVERAGE_RATING < 9 GROUP BY G.AVERAGE_RATING);
    SET AVG_RATING_HIGHER_EQUALS_9 = (SELECT COUNT(*) FROM GAMES G WHERE G.AVERAGE_RATING >= 9.0 GROUP BY G.AVERAGE_RATING);

    INSERT INTO gameshub.GAMES_STATISTICS VALUES (NULL, CURRENT_DATE, IFNULL(QNT, 0), IFNULL(OPINIONS_QNT, 0), IFNULL(LOW_POP, 0),
                                                  IFNULL(MEDIUM_POP, 0), IFNULL(HIGH_POP, 0), IFNULL(VERY_HIGH_POP, 0),
                                                  IFNULL(ON_TOP_POP, 0), IFNULL(AVG_RATING_LOWER_THEN_5, 0),
                                                  IFNULL(AVG_RATING_BETWEEN_5_AND_7_5, 0), IFNULL(AVG_RATING_BETWEEN_7_5_AND_9, 0),
                                                  IFNULL(AVG_RATING_HIGHER_EQUALS_9, 0));
    COMMIT ;
end $$
DELIMITER ;



CREATE EVENT CREATE_NEW_GAMES_STATS
    ON SCHEDULE EVERY 1 HOUR
    DO CALL CreateNewGamesStats();



DROP FUNCTION IF EXISTS UserActivityStatus;

CREATE FUNCTION UserActivityStatus(opinionsQntPerDay DECIMAL, ratingsQntPerDay DECIMAL) RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
    DECLARE result VARCHAR(20) DEFAULT 'LOW';
    IF opinionsQntPerDay > 5 OR ratingsQntPerDay > 5 THEN
        SET result = 'TOP';
    ELSEIF opinionsQntPerDay > 3 AND opinionsQntPerDay <= 5 OR ratingsQntPerDay > 3 AND ratingsQntPerDay <= 5 THEN
        SET result = 'HIGH';
    ELSEIF opinionsQntPerDay > 1 AND opinionsQntPerDay <= 3 OR ratingsQntPerDay > 1 AND ratingsQntPerDay <= 3 THEN
        SET result = 'MEDIUM';
    ELSE
        SET result = 'LOW';
    end if;
    RETURN result;
end;



DROP PROCEDURE IF EXISTS UpdateUserActivityStatus;

CREATE PROCEDURE UpdateUserActivityStatus()
BEGIN
    DECLARE U_ID INT;
    DECLARE OPINIONS_PER_DAY, RATINGS_PER_DAY DECIMAL (5,2);
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_USERS CURSOR FOR SELECT ID FROM  USERS;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;

    OPEN ALL_USERS;
    WHILE (FINISHED = 0) DO
            FETCH ALL_USERS INTO U_ID;
            IF (FINISHED = 0) THEN
                SET OPINIONS_PER_DAY = UserOpinionsPerDay(U_ID);
                SET RATINGS_PER_DAY = UserRatingsPerDay(U_ID);

                UPDATE USERS SET ACTIVITY_STATUS = UserActivityStatus(OPINIONS_PER_DAY, RATINGS_PER_DAY)
                WHERE ID = U_ID;
                COMMIT ;
            end if;
        end while;
    CLOSE ALL_USERS;
end;



CREATE TABLE USERS_STATISTICS (
                                  ID SERIAL PRIMARY KEY  AUTO_INCREMENT,
                                  ADDED_DATE DATETIME DEFAULT NOW() ,
                                  QNT INT DEFAULT 0,
                                  CONFIRMED INT DEFAULT 0,
                                  REGULAR_USERS INT DEFAULT 0,
                                  ADMINS INT DEFAULT 0,
                                  WITH_LOW_ACTIVITY_STATUS INT DEFAULT 0,
                                  WITH_MEDIUM_ACTIVITY_STATUS INT DEFAULT 0,
                                  WITH_HIGH_ACTIVITY_STATUS INT DEFAULT 0,
                                  WITH_TOP_ACTIVITY_STATUS INT DEFAULT 0,
                                  WITH_OPINIONS_QNT_LOWER_THEN_5 INT DEFAULT 0,
                                  WITH_OPINIONS_QNT_BETWEEN_5_AND_10 INT DEFAULT 0,
                                  WITH_OPINIONS_QNT_HIGHER_THEN_10 INT DEFAULT 0,
                                  WITH_RATINGS_QNT_LOWER_THEN_5 INT DEFAULT 0,
                                  WITH_RATINGS_QNT_BETWEEN_5_AND_10 INT DEFAULT 0,
                                  WITH_RATINGS_QTN_HIGHER_THEN_10 INT DEFAULT 0
);


DROP PROCEDURE IF EXISTS CreateNewUsersStats;

DELIMITER $$
CREATE PROCEDURE CreateNewUsersStats()
BEGIN
    DECLARE QNT, CONFIRMED, REGULAR_USERS, ADMINS, L_ACT, M_ACT, H_ACT, T_AVT,
        OPINIONS_LOWER_5, OPINIONS_BETWEEN_5_10, OPINIONS_HIGHER_10, RATINGS_LOWER_5,
        RATINGS_BETWEEN_5_10, RATINGS_HIGHER_THEN_10 INT;

    SET QNT = (SELECT COUNT(*) FROM USERS);
    SET CONFIRMED = (SELECT COUNT(*) FROM USERS U WHERE U.VERIFIED = TRUE);
    SET REGULAR_USERS = (SELECT COUNT(*) FROM USERS U WHERE U.ROLES = 'USER');
    SET ADMINS = (SELECT COUNT(*) FROM USERS U WHERE U.ROLES = 'ADMIN');
    SET L_ACT = (SELECT COUNT(*) FROM USERS U WHERE U.ACTIVITY_STATUS = 'LOW');
    SET M_ACT = (SELECT COUNT(*) FROM USERS U WHERE U.ACTIVITY_STATUS = 'MEDIUM');
    SET H_ACT = (SELECT COUNT(*) FROM USERS U WHERE U.ACTIVITY_STATUS = 'HIGH');
    SET T_AVT = (SELECT COUNT(*) FROM USERS U WHERE U.ACTIVITY_STATUS = 'TOP');
    SET OPINIONS_LOWER_5 = (SELECT COUNT(*) FROM USERS U WHERE U.OPINIONS_QNT < 5);
    SET OPINIONS_BETWEEN_5_10 = (SELECT COUNT(*) FROM USERS U WHERE U.OPINIONS_QNT >= 5 AND U.OPINIONS_QNT <= 10);
    SET OPINIONS_HIGHER_10 = (SELECT COUNT(*) FROM USERS U WHERE U.OPINIONS_QNT > 10);
    SET RATINGS_LOWER_5 = (SELECT COUNT(*) FROM USERS U WHERE U.RATINGS_QNT < 5);
    SET RATINGS_BETWEEN_5_10 = (SELECT COUNT(*) FROM USERS U WHERE U.RATINGS_QNT >= 5 AND U.RATINGS_QNT <= 10);
    SET RATINGS_HIGHER_THEN_10 = (SELECT COUNT(*) FROM USERS U WHERE U.RATINGS_QNT > 10);

    INSERT INTO USERS_STATISTICS VALUES (NULL, CURRENT_TIME, IFNULL(QNT, 0), IFNULL(CONFIRMED, 0),
                                         IFNULL(REGULAR_USERS, 0), IFNULL(ADMINS, 0), IFNULL(L_ACT, 0),
                                         IFNULL(M_ACT, 0), IFNULL(H_ACT, 0), IFNULL(T_AVT, 0),
                                         IFNULL(OPINIONS_LOWER_5, 0), IFNULL(OPINIONS_BETWEEN_5_10, 0),
                                         IFNULL(OPINIONS_HIGHER_10, 0), IFNULL(RATINGS_LOWER_5, 0),
                                         IFNULL(RATINGS_BETWEEN_5_10, 0), IFNULL(RATINGS_HIGHER_THEN_10, 0));
    COMMIT ;
end $$
DELIMITER ;


CREATE EVENT CREATE_NEW_USERS_STATS
    ON SCHEDULE EVERY 1 HOUR
    DO CALL CreateNewUsersStats();



